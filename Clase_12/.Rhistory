library(tidyverse)
library(h2o)
df <- read.csv("/Data/DATASETS/istambul_mkt.csv", sep =";", stringsAsFactors = TRUE)
df <- read.csv("./istambul_mkt.csv", sep =";", stringsAsFactors = TRUE)
head(df)
df <- df%>%select(-date)
smp_size <- floor(0.75 * nrow(df))
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train_df <- df[train_ind, ]
test_df <- df[-train_ind, ]
h2o.init()
train_df_h2o<-as.h2o(train_df)
test_df_h2o<-as.h2o(test_df)
upgrade("data.table")
install.packages("data.table")
# Identify predictors and response
y <- "ISE"
x <- setdiff(names(train_df_h2o), y)
?setdiff
x
?h20.gbm
?gbm
?h2o.gbm
?seq_len
seq(0, 1, length.out = 11)
seq_len(nrow(df))
sample(seq_len(nrow(df)), size = smp_size)
train_ind <- df[1:smp_size,]
train_df <- df[train_ind, ]
test_df <- df[-train_ind, ]
train_ind <- 1:smp_size
train_ind
train_df <- df[train_ind, ]
test_df <- df[-train_ind, ]
train_df_h2o<-as.h2o(train_df)
test_df_h2o<-as.h2o(test_df)
# Identify predictors and response
y <- "ISE"
x <- setdiff(names(train_df_h2o), y)
# Number of CV cross-validation folds (to generate level-one data for stacking)
nfolds <- 5
# Train &amp; Cross-validate a GBM
my_gbm <- h2o.gbm(x = x,
y = y,
training_frame = train_df_h2o,
nfolds = nfolds,
keep_cross_validation_predictions = TRUE,
seed = 5)
my_gbm
my_rf <- h2o.randomForest(x = x,
y = y,
training_frame = train_df_h2o,
nfolds = nfolds,
keep_cross_validation_predictions = TRUE,
seed = 5)
my_rf
# Train &amp; Cross-validate a LR
my_lr <- h2o.glm(x = x,
y = y,
training_frame = train_df_h2o,
family = c("binomial"),
nfolds = nfolds,
keep_cross_validation_predictions = TRUE,
seed = 5)
my_lr
# Train a stacked random forest ensemble using the GBM, RF and LR above
ensemble <- h2o.stackedEnsemble(x = x,
y = y,
metalearner_algorithm="drf",
training_frame = train_df_h2o,
base_models = list(my_gbm, my_rf, my_lr))
# Eval ensemble performance on a test set
perf <- h2o.performance(ensemble, newdata = test_df_h2o)
perf
# Compare to base learner performance on the test set
perf_gbm_test <- h2o.performance(my_gbm, newdata = test_df_h2o)
perf_gbm_test
perf_rf_test <- h2o.performance(my_rf, newdata = test_df_h2o)
perf_rf_test
perf_lr_test <- h2o.performance(my_lr, newdata = test_df_h2o)
perf_lr_test
baselearner_best_auc_test <- max(h2o.auc(perf_gbm_test), h2o.auc(perf_rf_test), h2o.auc(perf_lr_test))
baselearner_best_auc_test
ensemble_auc_test
print
ensemble_auc_test <- h2o.auc(perf)
print(sprintf("Best Base-learner Test AUC:  %s", baselearner_best_auc_test))
print(sprintf("Ensemble Test AUC:  %s", ensemble_auc_test))
?h2o.auc()
baselearner_best_auc_test
perf_list <- list(gbm:perf_gbm_test, rf:perf_rf_test , lr:perf_lr_test )
?list
perf_list <- list(gbm=perf_gbm_test, rf=perf_rf_test , lr=perf_lr_test )
perf_list
per_list <- lapply(c(perf_gbm_test,perf_rf_test,perf_lr_test), h2o.auc)
per_list
per_list <- apply(c(perf_gbm_test,perf_rf_test,perf_lr_test), h2o.auc)
per_list <- lapply(c(perf_gbm_test,perf_rf_test,perf_lr_test), h2o.auc)
max(per_list)
perf_list <- list(gbm=h2o.auc(perf_gbm_test), rf=h2o.auc(perf_rf_test) , lr=h2o.auc(perf_lr_test) )
perf_list
max(per_list)
?pairlist
unlist(perf_list)
max(unlist(per_list))
find(0.8197767,per_list)
?find
perf_list.find(0.8197767)
list.search
i
perf_list <- df(gbm=h2o.auc(perf_gbm_test), rf=h2o.auc(perf_rf_test) , lr=h2o.auc(perf_lr_test) )
perf_list <- as.data.frame(gbm=h2o.auc(perf_gbm_test), rf=h2o.auc(perf_rf_test) , lr=h2o.auc(perf_lr_test) )
which.max(per_list)
per_list[which.max(per_list)]
per_list[[which.max(per_list)]
]
names(per_list)[which.max(per_list)]
names(per_list)[3]
names(per_list)
per_list
perf_list <- list(gbm=h2o.auc(perf_gbm_test), rf=h2o.auc(perf_rf_test) , lr=h2o.auc(perf_lr_test) )
names(perf_list)
per_list[which.max(per_list)]
names(perf_list)
names(perf_list)[3]
baselearner_best_auc_test
baselearner_best_auc_test <- max(unlist(perf_list))
baselearner_best_auc_test
name_best_auc <- names(perf_list)[which.max(baselearner_best_auc_test)]
name_best_auc
print(sprintf("Best Base-Learner: ",name_best_auc , "Best Base-learner Test AUC:  %s", baselearner_best_auc_test))
?sprintf
print(paste("Best Base-Learner: ",name_best_auc , "Best Base-learner Test AUC:  %s", baselearner_best_auc_test))
print(paste("Best Base-Learner: ",name_best_auc , ".Best Base-learner Test AUC: ", baselearner_best_auc_test))
print(paste("Best Base-Learner: ",name_best_auc , "- Best Base-learner Test AUC: ", baselearner_best_auc_test))
print(sprintf("Ensemble Test AUC:  %s", ensemble_auc_test))
